#+TITLE: Emacs config file
#+AUTHOR: Nick Forrer
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* Emacs configuration file

** package setup
Add package sources

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+END_SRC

This helps get rid of =functions might not be defined at runtime= warnings. See https://github.com/jwiegley/use-package/issues/590

#+BEGIN_SRC emacs-lisp
  ;; (eval-when-compile
  ;;   (setq use-package-expand-minimally byte-compile-current-file))
#+END_SRC

Use a separate file for storing 'custom-set-variables created by Emacs.
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+END_SRC

Automatically tangle this file on save

#+BEGIN_SRC emacs-lisp

  (defun tangle-init()
    "If the current buffer is 'config.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
		 (expand-file-name (concat user-emacs-directory "config.org")))
      ;; avoid running hooks while tangling
      (let ((prog-mode-hook nil))
	;; (byte-compile-file (concat user-emacs-directory "config.el"))
	(org-babel-tangle))))

  (add-hook 'after-save-hook 'tangle-init)

#+END_SRC

** Appearance

Make changes to appearance: disable menu, toolbar, scrollbar, and apply
custom theme and font.

#+BEGIN_SRC emacs-lisp
  ;; disable ui elements
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)

  ;; set the default font
  (set-frame-font "Liberation Mono-12")

  ;; install theme (NOTE: the first theme in the list is used)
  (setq *my-themes* '(doom gruvbox spacemacs))
  (let ((first-theme (car *my-themes*)))
    (cond ((equal first-theme 'gruvbox)
	   (use-package gruvbox-theme))
	  ((equal first-theme 'spacemacs)
	   (use-package spacemacs-theme
	     :defer t
	     :init
	     (load-theme 'spacemacs-dark t))
	   (use-package spaceline
	     :demand t
	     :init
	     (setq powerline-default-separator 'arrow-fade)
	     :config
	     (require 'spaceline-config)
	     (spaceline-spacemacs-theme)))
	  ((equal first-theme 'doom)
	   (use-package doom-themes
	     :init
	     (load-theme 'doom-one t)
	     :config
	     (doom-themes-visual-bell-config)
	     (doom-themes-org-config))
	   (use-package doom-modeline
	     :ensure t
	     :defer t
	     :hook (after-init . doom-modeline-init)))))

  ;; disable startup screen
  (setq inhibit-startup-screen t)
  ;; only ask y on n, not yes or no
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; split window on startup, and open todo list
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (split-window-right)
	      (org-agenda-list)))
#+END_SRC

** Misc

#+BEGIN_SRC emacs-lisp
  ;; confirm before closing emacs
  (setq confirm-kill-emacs 'yes-or-no-p)

  ;; custom functions
  (defun duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (forward-line 1)
    (yank))

  ;; install use-package
  (if (not (package-installed-p 'use-package))
      (progn
	(package-refresh-contents)
	(package-install 'use-package)))
  (require 'use-package)

  ;; set some global variables
  (setq backup-directory-alist
	`(("." . ,(concat user-emacs-directory "backups"))))
  (setq use-package-always-ensure t)

  ;; automatically follow log files
  (add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-tail-mode))

  (use-package slime
    :config
    (setq inferior-lisp-program "sbcl")
    (setq slime-contribs '(slime-fancy slime-company)))

  ;; install packages
  (use-package ivy
    :demand t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) "))
  (use-package counsel
    :after ivy
    :bind (("C-x C-f" . counsel-find-file)))
  (use-package magit
    :after ivy
    :bind ("C-x g" . magit-status)
    :config
    (setq magit-completing-read-function 'ivy-completing-read))
  (use-package projectile
    :after ivy
    :bind (("C-c p" . projectile-command-map))
    :config
    (projectile-mode)
    (setq projectile-completion-system 'ivy))

  (use-package org
    :defer t
    :bind (("C-c c" . org-capture)
	   ("C-c a" . org-agenda))
    :config
    (setq org-directory "~/usr/gtd"
	  org-agenda-files '("~/usr/gtd/inbox.org"
			     "~/usr/gtd/gtd.org"
			     "~/usr/gtd/tickler.org"))
    (setq org-capture-templates '(("t" "Todo [inbox]" entry
				   (file+headline "~/usr/gtd/inbox.org" "Tasks")
				   "* TODO %i%?")
				  ("T" "Tickler" entry
				   (file+headline "~/usr/gtd/tickler.org" "Tickler")
				   "* %i%? \n %U")))
    (setq org-refile-targets '(("~/usr/gtd/gtd.org" :maxlevel . 3)
			       ("~/usr/gtd/someday.org" :level . 1)
			       ("~/usr/gtd/tickler.org" :maxlevel . 2)))

    (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

    (setq org-agenda-custom-commands '(("o" "At the office" tags-todo "@office"
					((org-agenda-overriding-header "Office"))))))

  (use-package smart-tab
    :config
    (global-smart-tab-mode 1))
  (use-package company
    :hook (after-init . global-company-mode))
  (use-package undo-tree
    :hook (after-init . global-undo-tree-mode))
  (use-package re-builder
    :defer t
    :config
    (setq reb-re-syntax 'string))
  (use-package eshell
    :bind ("<f12>" . eshell))
  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))
  (use-package elfeed
    :bind (("C-x w" . elfeed))
    :config
    (setq elfeed-feeds '(("http://pragmaticemacs.com/feed/" blog emacs)
			 ("https://www.xkcd.com/rss.xml" comics))))
  ;;; various language modes
  (use-package js2-mode
    :defer t
    :mode "\\.js\\'"
    :interpreter "js2-mode")
  (use-package yaml-mode
    :defer t)
  (use-package markdown-mode
    :defer t)
  (use-package dockerfile-mode
    :defer t)
  (use-package tide ;; typescript mode
    :hook ((typescript-mode . (lambda ()
				(interactive)
				(tide-setup)
				(flycheck-mode +1)
				(setq flycheck-check-syntax-automatically '(save mode-enabled))
				(eldoc-mode +1)
				(tide-hl-identifier-mode +1)
				(company-mode +1))))
    :config
    (setq company-tooltip-align-annotations t)) 
  (use-package ng2-mode
    :after tide)
  (use-package pug-mode
    :defer t)
  (use-package restclient
    :defer t
    :mode ("\\.http\\'" . restclient-mode)
    :interpreter "restclient-mode")
  (use-package csv-mode
    :defer t)
  (use-package nasm-mode
    :defer t
    :mode "\\.s\\'")
  (defun override-slime-repl-bindings-with-paredit ()
    (define-key slime-repl-mode-map
      (read-kbd-macro paredit-backward-delete-key) nil))
  (use-package paredit
    :hook ((emacs-lisp-mode . enable-paredit-mode)
	   (lisp-mode       . enable-paredit-mode)
	   (slime-repl-mode . (lambda ()
				(paredit-mode +1)
				(override-slime-repl-bindings-with-paredit)))))

  ;;; java
  (use-package autodisass-java-bytecode
    :defer t)
  (use-package google-c-style
    :defer t
    :commands
    (google-set-c-style))
  (use-package meghanada
    :hook ((java-mode . meghanada-mode)
	   (java-mode . flycheck-mode)
	   (java-mode . (lambda ()
			  (google-set-c-style)
			  (setq c-basic-offset 4)))))

#+END_SRC

** Python
#+BEGIN_SRC shell
  # install python dependencies
  pip install jedi flake8 autopep8
#+END_SRC
#+BEGIN_SRC emacs-lisp
  ;; (use-package elpy
  ;;   :config
  ;;   (elpy-enable))
  (use-package pipenv
    :hook (python-mode . pipenv-mode)
    :init
    (setq
     pipenv-projectile-after-switch-function #'pipenv-projectile-after-switch-extended))
#+END_SRC
